#!/usr/bin/env bash

# https://betterdev.blog/minimal-safe-bash-script-template/

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

script_dir=$(dirname $(readlink -f $0))

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] -t TRACK [-p POSITION] [-r RANK] [-s SPEED]

Script description here.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-t, --track     Enough of the filename to uniquely identify it (required)
-p, --pos       Set new position in seconds
-r, --rank      Set new rank
-s, --speed     Set new speed
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

log() {
    echo $(date "+%Y-%m-%d %T") :: $*
    echo >&2 -e "${1-}"
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  track=""
  pos=""
  rank=""
  speed=""

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -t | --track)
      track="${2-}"
      shift
      ;;
    -p | --pos)
      pos="${2-}"
      shift
      ;;
    -r | --rank)
      rank="${2-}"
      shift
      ;;
    -s | --speed)
      speed="${2-}"
      shift
      ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  # check required params and arguments
  [[ -z "${track-}" ]] && die "Missing required parameter: track"

  return 0
}

parse_params "$@"
setup_colors

dbfile=${script_dir}/audless.db
[ ! -f ${dbfile} ] && die "missing database"

where_clause="lower(file) like lower('%${track}%'"

log "validating title"
matches=$(sqlite3 ${dbfile} "select count(*) from queue where ${where_clause})")
[ ${matches} -eq 0 ] && die "track not found: ${track}"
[ ${matches} -ne 1 ] && die "track not unique: ${track}"

if [ "${pos}" != "" ]; then
    log "updating pos to ${pos}"
    sqlite3 ${dbfile} "update queue set pos=${pos} where ${where_clause})"
fi

if [ "${rank}" != "" ]; then
    log "updating rank to ${rank}"
    sqlite3 ${dbfile} "update queue set rank=${rank} where ${where_clause})"
fi

if [ "${speed}" != "" ]; then
    log "updating speed to ${speed}"
    sqlite3 ${dbfile} "update queue set speed=${speed} where ${where_clause})"
fi
