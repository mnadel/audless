#!/bin/bash

pidfile=$HOME/play_next.pid

trap cleanup SIGINT SIGTERM ERR EXIT

function cleanup {
    trap - SIGINT SIGTERM ERR EXIT
    if [ -f ${pidfile} ]; then
        kill -9 $(cat ${pidfile})
        rm $pidfile
        echo cleaned up pidfile ${pidfile}
    fi
}

activation=$(sqlite3 audless.db "SELECT value FROM config WHERE key='activation_bytes'")
next_up=$(sqlite3 audless.db "SELECT file,pos FROM queue WHERE pos <= end ORDER BY rank DESC LIMIT 1")

if [ "${next_up}" = "" ]; then
    echo queue is empty
    exit 0
fi

file=$(echo $next_up | awk -F'|' '{print $1}')
seek=$(echo $next_up | awk -F'|' '{print $2}')

echo starting ${file} at ${seek}

SDL_AUDIODRIVER=alsa AUDIODEV=hw ffplay -activation_bytes ${activation} \
    -hide_banner \
    -stats \
    -nodisp \
    -ss ${seek} \
    "${file}" > /dev/null 2>&1 &

pid=$!
disown ${pid}

echo ${pid} > ${pidfile}
echo tracking player at pid ${pid}

# to record where we're at in the audio stream, we'll inspect the ffplay process via strace.
# with the `-stats` flag, ffplay will write the current position in the stream (in seconds) to STDOUT.
# we use strace to capture those `write` syscalls, parse out the position within the stream, then write
# that to our database (and we use `timeout`` to exit strace after 0.1 seconds).
while [ -f ${pidfile} ]; do
    sleep 30
    pos=$(timeout 0.1 strace -p${pid} -s9999 -e write=1 2>&1 | grep write | tail -1 | awk '{print $3}')
    if [ "$pos" != "" ]; then
        sqlite3 audless.db "UPDATE queue SET pos=${pos} WHERE file='${file}'"
        echo new pos at ${pos}
    else
        cleanup
    fi
done

echo player exited, no more ${pidfile}
